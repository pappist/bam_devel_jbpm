<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">

  <title>Integration with Maven, OSGi, Spring, etc.</title>

  <para>jBPM can be integrated with a lot of other technologies.  This chapter gives an
  overview of a few of those that are supported out-of-the-box.  Most of these modules
  are developed as part of the droolsjbpm-integration module, so they work not only for your
  business processes but also for business rules and complex event processing.</para>
  
  <section>
    <title>Maven</title>

  <para>By using a Maven pom.xml to define your project dependencies, you can let maven get
  your dependencies for you.  The following pom.xml is an example that could for example be
  used to create a new Maven project that is capable of executing a BPMN2 process:</para>
  
<programlisting language="xml">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
  &lt;artifactId&gt;jbpm-maven-example&lt;/artifactId&gt;
  &lt;name&gt;jBPM Maven Project&lt;/name&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  
  &lt;repositories&gt;
    &lt;!--  use this repository for stable releases --&gt;
    &lt;repository&gt;
      &lt;id&gt;jboss-public-repository-group&lt;/id&gt;
      &lt;name&gt;JBoss Public Maven Repository Group&lt;/name&gt;
      &lt;url&gt;https://repository.jboss.org/nexus/content/groups/public/&lt;/url&gt;
      &lt;layout&gt;default&lt;/layout&gt;
      &lt;releases&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
    &lt;!-- use this repository for snapshot releases --&gt;
    &lt;repository&gt;
      &lt;id&gt;jboss-snapshot-repository-group&lt;/id&gt;
      &lt;name&gt;JBoss SNAPSHOT Maven Repository Group&lt;/name&gt;
      &lt;url&gt;https://repository.jboss.org/nexus/content/repositories/snapshots/&lt;/url&gt;
      &lt;layout&gt;default&lt;/layout&gt;
      &lt;releases&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/releases&gt;
      &lt;snapshots&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;updatePolicy&gt;never&lt;/updatePolicy&gt;
      &lt;/snapshots&gt;
    &lt;/repository&gt;
    
  &lt;/repositories&gt;
    
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.jbpm&lt;/groupId&gt;
      &lt;artifactId&gt;jbpm-bpmn2&lt;/artifactId&gt;
      &lt;version&gt;5.0.0&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  
&lt;/project&gt;</programlisting>

    <para>To use this as the basis for your project in Eclipse, either use M2Eclipse or
    use "mvn eclipse:eclipse" to generate eclipse .project and .classpath files based on
    this pom.</para>

    </section>
    
    <section>
      <title>OSGi</title>
    
      <para>All core jbpm jars (and core dependencies) are OSGi-enabled.  That means that
      they contain MANIFEST.MF files (in the META-INF directory) that describe their
      dependencies etc.  These manifest files are automatically generated by the build.
      You can plug these jars directly into an OSGi environment.</para>
      
  <para>OSGi is a dynamic module system for declarative services. So what does
  that mean? Each jar in OSGi is called a bundle and has it's own Classloader.
  Each bundle specifies the packages it exports (makes publicly available) and
  which packages it imports (external dependencies). OSGi will use this
  information to wire the classloaders of different bundles together; the key
  distinction is you don't specify what bundle you depend on, or have a single
  monolithic classpath, instead you specify your package import and version
  and OSGi attempts to satisfy this from available bundles.</para>

  <para>It also supports side by side versioning, so you can have multiple
  versions of a bundle installed and it'll wire up the correct one. Further to
  this Bundles can register services for other bundles to use. These services
  need initialisation, which can cause ordering problems - how do you make
  sure you don't consume a service before its registered? OSGi has a number of
  features to help with service composition and ordering. The two main ones
  are the programmatic ServiceTracker and the xml based Declarative Services.
  There are also other projects that help with this; Spring DM, iPOJO,
  Gravity.</para>

  <para> The following jBPM jars are OGSi-enabled:</para>
      <itemizedlist>
        <listitem>jbpm-flow</listitem>
        <listitem>jbpm-flow-builder</listitem>
        <listitem>jbpm-bpmn2</listitem>
      </itemizedlist>
      
  <para>For example, the following code example shows how you can look up the
  necessary services in an OSGi environment using the service registry and 
  create a session that can then be used to start processes, signal events, etc.</para>
       
<programlisting>ServiceReference serviceRef = bundleContext.getServiceReference( ServiceRegistry.class.getName() );
ServiceRegistry registry = (ServiceRegistry) bundleContext.getService( serviceRef );

KnowledgeBuilderFactoryService knowledgeBuilderFactoryService = registry.get( KnowledgeBuilderFactoryService.class );
KnowledgeBaseFactoryService knowledgeBaseFactoryService = registry.get( KnowledgeBaseFactoryService.class );
ResourceFactoryService resourceFactoryService = registry.get( ResourceFactoryService.class );

KnowledgeBaseConfiguration kbaseConf = knowledgeBaseFactoryService.newKnowledgeBaseConfiguration( null, getClass().getClassLoader() );

KnowledgeBuilderConfiguration kbConf = knowledgeBuilderFactoryService.newKnowledgeBuilderConfiguration( null, getClass().getClassLoader() );
KnowledgeBuilder kbuilder = knowledgeBuilderFactoryService.newKnowledgeBuilder( kbConf );
kbuilder.add( resourceFactoryService.newClassPathResource( "MyProcess.bpmn", Dummy.class ), ResourceType.BPMN2 );

kbaseConf = knowledgeBaseFactoryService.newKnowledgeBaseConfiguration( null, getClass().getClassLoader() );
KnowledgeBase kbase = knowledgeBaseFactoryService.newKnowledgeBase( kbaseConf );
kbase.addKnowledgePackages( kbuilder.getKnowledgePackages() );

StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();
</programlisting>      
    </section>
    
    <!-- section>
      <title>Spring</title>
      
    <para>A Spring XML configuration file can be used to define and configure knowledge bases
    and sessions.  This allows you to simply access a session from your Spring application.</para>
    
    <para>For example, the following configuration file sets up a new session based on a
    knowledge base with one process definition.  The session is configured to use persistence
    (JPA using an in-memory database) and transaction (using the Spring transaction manager).
    </para>
    
    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:drools="http://drools.org/schema/drools-spring"
  xmlns:jee="http://www.springframework.org/schema/jee"
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
    http://drools.org/schema/drools-spring http://drools.org/schema/drools-spring.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

  &lt;bean name="myDroolsBean" class="org.drools.container.spring.timer.MyDroolsBean"&gt;
    &lt;property name="emf" ref="entityManagerFactory" /&gt;
    &lt;property name="kbase" ref="knowledgeBase" /&gt;
    &lt;property name="kstore" ref="knowledgeStore" /&gt;
    &lt;property name="txm" ref="transactionManager" /&gt;
  &lt;/bean&gt;

  &lt;context:annotation-config/&gt;

  &lt;drools:kstore id="knowledgeStore"/&gt;

  &lt;drools:kbase id="knowledgeBase"&gt;
    &lt;drools:resources&gt;
      &lt;drools:resource type="BPMN2" source="classpath:MyProcess.bpmn" /&gt;
    &lt;/drools:resources&gt;
  &lt;/drools:kbase&gt;

  &lt;bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"&gt;
    &lt;property name="entityManagerFactory" ref="entityManagerFactory" /&gt;
  &lt;/bean&gt;

  &lt;bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
    &lt;property name="driverClassName" value="org.h2.Driver" /&gt;
    &lt;property name="url" value="jdbc:h2:mem:drools-spring-workflow" /&gt;
    &lt;property name="username" value="sa" /&gt;
    &lt;property name="password" value="" /&gt;
  &lt;/bean&gt;

  &lt;bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;
    &lt;property name="persistenceUnitName" value="org.drools.persistence.jpa.local" /&gt;
    &lt;property name="dataSource" ref="datasource" /&gt;
  &lt;/bean&gt;

&lt;/beans&gt;
    </programlisting>
    
    <para>Inside your code, you can then </para>
    
    // TODO can I create an entire session using spring config so the session is injected?
    // TODO can I inject a workitemhandler that for example has access to an injected Spring bean?
    </section-->

</chapter>